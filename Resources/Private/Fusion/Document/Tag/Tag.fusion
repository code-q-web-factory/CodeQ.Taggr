prototype(CodeQ.Taggr:Document.Tag) < prototype(Neos.Fusion:Case) {
    inBackend {
        condition = ${node.context.inBackend}
        renderer = Neos.Neos:Page {
            body = Neos.Neos:ContentComponent {
                taggedNodes = ${Array.filter(q(site).find('[instanceof CodeQ.Taggr:Mixin.Taggable]').add(site).get(), currentNode => Type.isArray(q(currentNode).property('tags')) && Array.indexOf(q(currentNode).property('tags'), documentNode) >= 0)}

                isNoticeEnabled = false
                notice = CodeQ.Taggr:Component.Notice {
                    type = ${q(node).property('noticeType')}
                    title = Neos.Neos:Editable {
                        property = 'noticeTitle'
                    }
                    content = Neos.Neos:Editable {
                        property = 'noticeText'
                    }
                }

                renderer = afx`
                    <h1>{q(documentNode).property('title')}</h1>

                    <Neos.Fusion:Fragment @if={props.isNoticeEnabled}>
                        <h2>{Translation.translate('notice.editTitle', null, [], null, 'CodeQ.Taggr')}</h2>
                        {props.notice}
                    </Neos.Fusion:Fragment>

                    <Neos.Fusion:Fragment @if={props.taggedNodes}>
                        <h2>{Translation.translate('taggedNodes.listTitle', null, [], null, 'CodeQ.Taggr')}</h2>
                        <ul>
                            <Neos.Fusion:Loop items={props.taggedNodes} itemName="node">
                                <CodeQ.Taggr:Component.NodeListEntry node={node} />
                            </Neos.Fusion:Loop>
                        </ul>
                    </Neos.Fusion:Fragment>
                `
            }

            @cache {
                mode = 'uncached'
                context {
                    1 = 'site'
                    2 = 'documentNode'
                    3 = 'node'
                }
            }
        }
    }
    default {
        condition = ${true}
        renderer = Neos.Fusion:Renderer {
            renderPath = '/error'
            @context.statusCode = 403
            @context.statusMessage = 'This page is not accessible in frontend'
        }
    }
}
